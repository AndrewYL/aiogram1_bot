import asyncio
import io
import logging
import threading
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputMediaDocument, KeyboardButton, ReplyKeyboardMarkup
from urllib.request import urlopen
import json
import sqlite3
#--------------------–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞-------------------------

# –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '1234567:your_token'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –í–∞—à –∞–π–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
admin_id=12345678
config_id=123

conn = sqlite3.connect(":memory:")  # –∏–ª–∏ :memory: —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ RAM
cursor = conn.cursor()


# #--------------------–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö-------------------------
async def get_data():
    to = time.time()
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ –∞–¥–º–∏–Ω—É
    forward_data = await bot.forward_message(admin_id, admin_id, config_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å–ª–∞–ª–∏
    file_data = await bot.get_file(forward_data.document.file_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–æ url
    file_url_data = bot.get_file_url(file_data.file_path)

    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞
    json_file= urlopen(file_url_data).read()
    print('–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–∫–∞–ø–∞ :=' + str(time.time() - to))
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ json –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    return json.loads(json_file)


#--------------------–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö-------------------------
async def save_data():
    to = time.time()
    sql = "SELECT * FROM users "
    cursor.execute(sql)
    data = cursor.fetchall()  # or use fetchone()
    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É
        str_data=json.dumps(data)

        # –û–±–Ω–æ–≤–ª—è–µ–º  –Ω–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        await bot.edit_message_media(InputMediaDocument(io.StringIO(str_data)), admin_id, config_id)

    except Exception as ex:
        print(ex)
    print('–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∫–∞–ø–∞:='+str(time.time() - to))

#--------------------–ú–µ—Ç–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ start-------------------------
@dp.message_handler(commands='start')
async def start(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sql_select = "SELECT * FROM users where chatid={}".format(message.chat.id)
    sql_insert = "INSERT INTO users VALUES ({}, '{}', {},{})".format(message.chat.id,message.chat.first_name, 0, 0)
    try:
        cursor.execute(sql_select)
        data = cursor.fetchone()
        if data is None:
            cursor.execute(sql_insert)
            conn.commit()
            await save_data()
    except Exception:
        data = await get_data()
        cursor.execute("CREATE TABLE users (chatid INTEGER , name TEXT, click INTEGER, state INTEGER)")
        cursor.executemany("INSERT INTO users VALUES (?,?,?,?)", data)
        conn.commit()
        cursor.execute(sql_select)
        data = cursor.fetchone()
        if data is  None:
            cursor.execute(sql_insert)
            conn.commit()
            await save_data()
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    button = KeyboardButton('–ö–ª–∏–∫')
    button2 = KeyboardButton('–†–µ–π—Ç–∏–Ω–≥')
    # –î–æ–±–∞–≤–ª—è–µ–º
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button).add(button2)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {}'.format(message.chat.first_name),reply_markup=kb)



#--------------------–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞-------------------------
@dp.message_handler()
async def main_logic(message: types.Message):

    to=time.time()
# –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.text == 'admin':
        cursor.execute("CREATE TABLE users (chatid INTEGER , name TEXT, click INTEGER, state INTEGER)")
        cursor.execute("INSERT INTO users VALUES (1234, 'eee', 1,0)")
        conn.commit()
        sql = "SELECT * FROM users "
        cursor.execute(sql)
        data = cursor.fetchall()
        str_data = json.dumps(data)
        await bot.send_document(message.chat.id, io.StringIO(str_data))
        await bot.send_message(message.chat.id, 'admin_id = {}'.format(message.chat.id))
        await bot.send_message(message.chat.id, 'config_id = {}'.format(message.message_id+1))


# –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        sql = "SELECT * FROM users where chatid={}".format(message.chat.id)
        cursor.execute(sql)
        data = cursor.fetchone()  # or use fetchone()
    except Exception:
        data = await get_data()
        cursor.execute("CREATE TABLE users (chatid INTEGER , name TEXT, click INTEGER, state INTEGER)")
        cursor.executemany("INSERT INTO users VALUES (?,?,?,?)", data)
        conn.commit()
        sql = "SELECT * FROM users where chatid={}".format(message.chat.id)
        cursor.execute(sql)
        data = cursor.fetchone()  # or use fetchone()


    #–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ click –Ω–∞ –æ–¥–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if data is not None:
        if message.text == '–ö–ª–∏–∫':
            sql = "UPDATE users SET click = {} WHERE chatid = {}".format(data[2]+1,message.chat.id)
            cursor.execute(sql)
            conn.commit()
            await bot.send_message(message.chat.id, '–ö–ª–∏–∫–æ–≤: {} üèÜ'.format(data[2]+1))



        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –†–µ–π—Ç–∏–Ω–≥ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ø 10
        if message.text == '–†–µ–π—Ç–∏–Ω–≥':
            sql = "SELECT * FROM users ORDER BY click DESC LIMIT 15"
            cursor.execute(sql)
            newlist = cursor.fetchall()  # or use fetchone()
            sql_count = "SELECT COUNT(chatid) FROM users"
            cursor.execute(sql_count)
            count=cursor.fetchone()
            rating='–í—Å–µ–≥–æ: {}\n'.format(count[0])
            i=1
            for user in newlist:
                rating=rating+str(i)+': '+user[1]+' - '+str(user[2])+'üèÜ\n'
                i+=1
            await bot.send_message(message.chat.id, rating)



    else:
        await bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

    print(time.time()-to)



def timer_start():
    threading.Timer(30.0, timer_start).start()
    try:
        asyncio.run_coroutine_threadsafe(save_data(),bot.loop)
    except Exception as exc:
        pass


#--------------------–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞-------------------------
if __name__ == '__main__':
    timer_start()
    executor.start_polling(dp, skip_updates=True)
