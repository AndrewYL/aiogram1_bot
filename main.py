import asyncio
import sqlite3
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor

API_TOKEN = '5282834057:AAGKZQR5A4HWvcE-oRr15Ucv_OPo2KCVdRA'

loop = asyncio.get_event_loop()

bot = Bot(token=API_TOKEN, loop=loop)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    examen = State()
    predmet = State()
    answer = State()
    end_ans = State()
    wast_ans = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await Form.examen.set()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/oge")
    item2 = types.KeyboardButton("/ege")
    item3 = types.KeyboardButton('/stats')
    item4 = types.KeyboardButton('/help')
    markup.add(item1, item2)
    markup.add(item3, item4)
    db = sqlite3.connect('db/user_db.db')
    cdb = db.cursor()
    cdb.execute(f"SELECT user_id FROM users WHERE user_id = '{message.from_user.id}'")
    if cdb.fetchone() is None:
        cdb.execute(f"INSERT INTO users VALUES(?,?,?,?,?)",
                    (message.from_user.id, message.from_user.first_name, 0, 0, 0))
        db.commit()
    db.close()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç–∫–∑–∞–º–µ–Ωüìù",
                         reply_markup=markup)


@dp.message_handler(state='*', commands=['help'])
@dp.message_handler(lambda message: message.text.lower() == 'help', state='*')
async def help_handler(message: types.Message):
    await bot.send_message(message.from_user.id, '–ï—Å–ª–∏ –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –Ω–∞ –≤—ã–±–æ—Ä–µ —ç–∫–∑–∞–º–µ–Ω–∞ –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ'
                                                 ' —Å—Ä–µ–¥–∏ –∫–Ω–æ–ø–æ–∫ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ. '
                                                 '–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ –∑–∞–¥–∞–Ω–∏–µ, '
                                                 '—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–∞–º—ã–π –≤–æ–ø—Ä–æ—Å. '
                                                 '–ï—Å–ª–∏ –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥—É—é'
                                                 ' –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start. '
                                                 '–ò –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –æ—Ç–≤–µ—Ç!')


@dp.message_handler(state='*', commands=['stats'])
@dp.message_handler(lambda message: message.text.lower() == 'stats', state='*')
async def stats_handler(message: types.Message):
    db = sqlite3.connect('db/user_db.db')
    cdb = db.cursor()
    cdb.execute(f"SELECT user_id FROM users WHERE user_id = '{message.from_user.id}'")
    cursor = db.cursor()
    sql = "SELECT * FROM users ORDER BY all_ans DESC LIMIT 10"
    cursor.execute(sql)
    newlist = cursor.fetchall()
    sql_count = "SELECT COUNT(user_id) FROM users"
    cursor.execute(sql_count)
    count = cursor.fetchone()
    if cdb.fetchone() is None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("/start")
        markup.add(item1)
        await bot.send_message(message.from_user.id, '–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –¥–ª—è –≤–∞—Å –≤–µ–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!',
                               reply_markup=markup)
    else:
        result = cdb.execute(f"""SELECT all_ans, right_ans, wrong_ans FROM users
                            WHERE user_id = '{message.from_user.id}'""").fetchall()
        for elem in result:
            await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä:')),
                                                                 md.text(' '),
                                                                 md.text('–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ', md.bold(elem[0])),
                                                                 md.text('–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[1]),
                                                                         f' ({round((elem[1] / elem[0] * 100))}%)'),
                                                                 md.text(f'–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[2]),
                                                                         f' ({round((elem[2] / elem[0] * 100))}%)'),
                                                                 sep='\n'), parse_mode=ParseMode.MARKDOWN)
            rating = '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}\n'.format(count[0])
            i = 1
            for user in newlist:
                rating = rating + str(i) + ' –º–µ—Å—Ç–æ: ' + user[1] + ' - ' + str(user[3]) +\
                         f' ({round((user[3] / user[2] * 100))}%)' + 'üèÜ\n'
                i += 1
            await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä')),
                                                                 md.text('–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É'
                                                                         ' –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤'),
                                                                 md.text(' '),
                                                                 md.text(rating),
                                                                 sep='\n'), parse_mode=ParseMode.MARKDOWN)
        db.close()


@dp.message_handler(lambda message: message.text not in ["/oge",
                                                         "/ege"], state=Form.examen)
async def failed_process_examen(message: types.Message):
    return await message.reply("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —ç–∫–∑–∞–º–µ–Ω\n"
                               "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–≥–æ –≤—ã–±–æ—Ä–∞")


@dp.message_handler(lambda message: message.text.lower() == '/oge', state=Form.examen)
async def process_oge(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
    item2 = types.KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫(–û–ì–≠)")
    item3 = types.KeyboardButton("–§–∏–∑–∏–∫–∞(–û–ì–≠)")
    item4 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–û–ì–≠)")
    item5 = types.KeyboardButton("–•–∏–º–∏—è(–û–ì–≠)")
    item6 = types.KeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è(–û–ì–≠)")
    item7 = types.KeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è(–û–ì–≠)")
    item8 = types.KeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–û–ì–≠)")
    item9 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è(–û–ì–≠)")
    item10 = types.KeyboardButton('/stats')
    item11 = types.KeyboardButton('/help')
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5, item6)
    markup.add(item7, item8)
    markup.add(item9)
    markup.add(item10, item11)
    await Form.predmet.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=markup)


@dp.message_handler(lambda message: message.text.lower() == '/ege', state=Form.examen)
async def process_ege(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
    item2 = types.KeyboardButton("–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
    item3 = types.KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫(–ï–ì–≠)")
    item4 = types.KeyboardButton("–§–∏–∑–∏–∫–∞(–ï–ì–≠)")
    item5 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–ï–ì–≠)")
    item6 = types.KeyboardButton("–•–∏–º–∏—è(–ï–ì–≠)")
    item7 = types.KeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è(–ï–ì–≠)")
    item8 = types.KeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è(–ï–ì–≠)")
    item9 = types.KeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–ï–ì–≠)")
    item10 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è(–ï–ì–≠)")
    item11 = types.KeyboardButton('/stats')
    item12 = types.KeyboardButton('/help')
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5, item6)
    markup.add(item7, item8)
    markup.add(item9, item10)
    markup.add(item11, item12)
    await Form.predmet.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=markup)


@dp.message_handler(lambda message: message.text.lower() not in ['–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                                                                 '–±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–µ–≥—ç)',
                                                                 '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–æ–≥—ç)',
                                                                 '—Ñ–∏–∑–∏–∫–∞(–æ–≥—ç)', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–æ–≥—ç)',
                                                                 '—Ö–∏–º–∏—è(–æ–≥—ç)', '–±–∏–æ–ª–æ–≥–∏—è(–æ–≥—ç)',
                                                                 '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–æ–≥—ç)', '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–æ–≥—ç)',
                                                                 '–∏—Å—Ç–æ—Ä–∏—è(–æ–≥—ç)', '—Ñ–∏–∑–∏–∫–∞(–µ–≥—ç)',
                                                                 '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–µ–≥—ç)', "—Ö–∏–º–∏—è(–µ–≥—ç)",
                                                                 '–±–∏–æ–ª–æ–≥–∏—è(–µ–≥—ç)', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–µ–≥—ç)',
                                                                 '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–µ–≥—ç)', '–∏—Å—Ç–æ—Ä–∏—è(–µ–≥—ç)'],
                    state=Form.predmet)
async def failed_process_predmet(message: types.Message):
    return await message.reply("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç\n"
                               "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–≥–æ –≤—ã–±–æ—Ä–∞")


@dp.message_handler(lambda message: message.text.lower(), state=Form.predmet)
async def process_predmet(message: types.Message, state: FSMContext):
    db = sqlite3.connect('db/user_db.db')
    cdb = db.cursor()
    cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")
    db.commit()
    db.close()
    conoge = sqlite3.connect('db/oge.db')
    conege = sqlite3.connect('db/ege.db')
    async with state.proxy() as data:
        data['predmet'] = message.text
        await Form.answer.set()
        await state.update_data(predmet=message.text)
        if message.text.lower() == "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–µ–≥—ç)":
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM rus_yaz
                WHERE id IN (SELECT id FROM rus_yaz ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM rus_yaz
                WHERE id IN (SELECT id FROM rus_yaz ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == '—Ñ–∏–∑–∏–∫–∞(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM fizika
                WHERE id IN (SELECT id FROM fizika ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM infor
                WHERE id IN (SELECT id FROM infor ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == '—Ö–∏–º–∏—è(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM him
                WHERE id IN (SELECT id FROM him ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == '–±–∏–æ–ª–æ–≥–∏—è(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM biol
                WHERE id IN (SELECT id FROM biol ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM geog
                WHERE id IN (SELECT id FROM geog ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM obshes
                WHERE id IN (SELECT id FROM obshes ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == '–∏—Å—Ç–æ—Ä–∏—è(–µ–≥—ç)':
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM hist
                WHERE id IN (SELECT id FROM hist ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM mat_prof
                WHERE id IN (SELECT id FROM mat_prof ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == "–±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
            cur = conege.cursor()
            result = cur.execute("""SELECT task, answer FROM mat_baz
                WHERE id IN (SELECT id FROM mat_baz ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if message.text.lower() == "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM matem
                 WHERE id IN (SELECT id FROM matem ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "—Ñ–∏–∑–∏–∫–∞(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM fizika
                 WHERE id IN (SELECT id FROM fizika ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM infor
                 WHERE id IN (SELECT id FROM infor ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "—Ö–∏–º–∏—è(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM him
                 WHERE id IN (SELECT id FROM him ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "–±–∏–æ–ª–æ–≥–∏—è(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM biol
                 WHERE id IN (SELECT id FROM biol ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM geog
                 WHERE id IN (SELECT id FROM geog ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM obshes
                 WHERE id IN (SELECT id FROM obshes ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()
        if message.text.lower() == "–∏—Å—Ç–æ—Ä–∏—è(–æ–≥—ç)":
            cur = conoge.cursor()
            result = cur.execute("""SELECT task, answer FROM hist
                 WHERE id IN (SELECT id FROM hist ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conoge.close()


@dp.message_handler(state=Form.answer)
async def last_answer(message: types.Message, state: FSMContext):
    answer = message.text
    otvet = await state.get_data()
    if ''.join(answer.lower().split()) == otvet['answer']:
        db = sqlite3.connect('db/user_db.db')
        cdb = db.cursor()
        cdb.execute(f"UPDATE users SET right_ans = right_ans + 1 WHERE user_id = {message.from_user.id}")
        db.commit()
        db.close()
        await bot.send_message(message.from_user.id, '–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üéâ')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
        item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
        item3 = types.KeyboardButton('/stats')
        item4 = types.KeyboardButton('/help')
        markup.add(item1, item2)
        markup.add(item3, item4)
        await Form.end_ans.set()
        await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/start")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await state.reset_state(with_data=False)
        await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞!', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/oge':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/oge")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await Form.examen.set()
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/ege':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/ege")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await Form.examen.set()
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
    else:
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –û–¥–Ω–∞–∫–æ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '
                                                '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã –µ—â–µ —Ä–∞–∑')
        await Form.wast_ans.set()


@dp.message_handler(state=Form.wast_ans)
async def last_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        answer = message.text
        db = sqlite3.connect('db/user_db.db')
        cdb = db.cursor()
        if ''.join(answer.lower().split()) == data['answer']:
            cdb.execute(f"UPDATE users SET right_ans = right_ans + 1 WHERE user_id = {message.from_user.id}")
            db.commit()
            db.close()
            await bot.send_message(message.from_user.id, '–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üéâ')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
            item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
            item3 = types.KeyboardButton('/stats')
            item4 = types.KeyboardButton('/help')
            markup.add(item1, item2)
            markup.add(item3, item4)
            await Form.end_ans.set()
            await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)
        elif ''.join(answer.lower().split()) == '/start':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/start")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await state.reset_state(with_data=False)
            await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞!', reply_markup=markup)
        elif ''.join(answer.lower().split()) == '/oge':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/oge")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await Form.examen.set()
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
        elif ''.join(answer.lower().split()) == '/ege':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/ege")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await Form.examen.set()
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
        else:
            cdb.execute(f"UPDATE users SET wrong_ans = wrong_ans + 1 WHERE user_id = {message.from_user.id}")
            db.commit()
            db.close()
            await bot.send_message(message.from_user.id, md.text(
                md.text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'),
                md.text(md.code('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:'), md.bold(data['answer'])),
                sep='\n'), parse_mode=ParseMode.MARKDOWN)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
            item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
            item3 = types.KeyboardButton('/stats')
            item4 = types.KeyboardButton('/help')
            markup.add(item1, item2)
            markup.add(item3, item4)
            await Form.end_ans.set()
            await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)


@dp.message_handler(state=Form.end_ans)
async def process_end_ans(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        com = message.text
        if com.lower() == '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton(f"{data['predmet']}")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item)
            markup.add(item1, item2)
            await Form.predmet.set()
            await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/start")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await state.reset_state(with_data=False)
            await bot.send_message(message.from_user.id, '–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!', reply_markup=markup)


if __name__ == '__main__':
    executor.start_polling(dp, loop=loop, skip_updates=True)
