import asyncio
import sqlite3
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from tok_en import TOKEN

API_TOKEN = TOKEN  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ tok_en.py

loop = asyncio.get_event_loop()

bot = Bot(token=API_TOKEN, loop=loop)

storage = MemoryStorage()  # –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
dp = Dispatcher(bot, storage=storage)  # –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏


class User(StatesGroup):  # –∑–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    examen = State()
    predmet = State()
    answer = State()
    end_ans = State()
    wast_ans = State()


@dp.message_handler(commands=['start'])  # –∫–æ–º–∞–Ω–¥–∞ "/start"
async def start_handler(message: types.Message):
    await User.examen.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/oge")
    item2 = types.KeyboardButton("/ege")
    item3 = types.KeyboardButton('/stats')
    item4 = types.KeyboardButton('/help')
    markup.add(item1, item2)
    markup.add(item3, item4)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    db = sqlite3.connect('db/user_db.db')
    cdb = db.cursor()
    cdb.execute(f"SELECT user_id FROM users WHERE user_id = '{message.from_user.id}'")  # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è
    if cdb.fetchone() is None:  # –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–º
        cdb.execute(f"INSERT INTO users VALUES(?,?,?,?,?)",  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ç—É–¥–∞
                    (message.from_user.id, message.from_user.first_name, 0, 0, 0))
        db.commit()
    db.close()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç–∫–∑–∞–º–µ–Ωüìù",
                         reply_markup=markup)


# state = '*' –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message_handler(state='*', commands=['help'])  # –∫–æ–º–∞–Ω–¥–∞ "/help"
@dp.message_handler(lambda message: message.text.lower() == 'help', state='*')
async def help_handler(message: types.Message):
    await bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                                                 '/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
                                                 '/oge - –≤—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –û–ì–≠\n'
                                                 '/ege - –≤—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω –ï–ì–≠\n'
                                                 '/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
                                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–∞—Ç—å, '
                                                 '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ï—Å–ª–∏ –≤—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç'
                                                 ' –∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. '
                                                 '–ï—Å–ª–∏ –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É,'
                                                 ' –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start. –ò –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —É '
                                                 '–≤–∞—Å –µ—Å—Ç—å 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –æ—Ç–≤–µ—Ç.')


@dp.message_handler(state='*', commands=['stats'])  # –∫–æ–º–∞–Ω–¥–∞ "/stats"
@dp.message_handler(lambda message: message.text.lower() == 'stats', state='*')
async def stats_handler(message: types.Message):
    db = sqlite3.connect('db/user_db.db')
    cdb = db.cursor()
    cdb.execute(f"SELECT user_id FROM users WHERE user_id = '{message.from_user.id}'")  # —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
    if cdb.fetchone() is None:  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("/start")
        markup.add(item1)
        cdb.execute(f"INSERT INTO users VALUES(?,?,?,?,?)",  # –∏ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ç—É–¥–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
                    (message.from_user.id, message.from_user.first_name, 0, 0, 0))
        db.commit()
        db.close()
        await message.answer('–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!–ù–∞–∂–º–∏—Ç–µ /stats –µ—â—ë —Ä–∞–∑(—Ç–∞–∫ –∫–∞–∫ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–µ –Ω–∞–∂–∞–ª–∏ start)')
    else:
        result = cdb.execute(f"""SELECT all_ans, right_ans, wrong_ans FROM users
                            WHERE user_id = '{message.from_user.id}'""").fetchall()
        for elem in result:
            if elem[0] == 0:
                await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä:')),
                                                                     md.text(' '),
                                                                     md.text('–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ', md.bold(elem[0])),
                                                                     md.text('–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[1]),
                                                                             ' (0%)'),
                                                                     md.text(f'–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[2]),
                                                                             ' (0%)'),
                                                                     sep='\n'), parse_mode=ParseMode.MARKDOWN)
            else:
                await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä:')),
                                                                     md.text(' '),
                                                                     md.text('–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ',
                                                                             md.bold(elem[0])),
                                                                     md.text('–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ',
                                                                             md.bold(elem[1]),
                                                                     f' ({round((elem[1] / elem[0] * 100), 1)}%)'),
                                                                     md.text(f'–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[2]),
                                                                     f' ({round((elem[2] / elem[0] * 100), 1)}%)'),
                                                                     sep='\n'), parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(lambda message: message.text not in ["/oge",  # —Ö–∞–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞
                                                         "/ege"], state=User.examen)
async def failed_process_examen(message: types.Message):
    return await message.reply("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —ç–∫–∑–∞–º–µ–Ω\n"
                               "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –µ–≥–æ –≤—ã–±–æ—Ä–∞")


@dp.message_handler(lambda message: message.text.lower() == '/oge', state=User.examen)  # –∫–æ–º–∞–Ω–¥–∞ "/oge"
async def process_oge(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vibor_ex'] = 'oge'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        item2 = types.KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫(–û–ì–≠)")
        item3 = types.KeyboardButton("–§–∏–∑–∏–∫–∞(–û–ì–≠)")
        item4 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–û–ì–≠)")
        item5 = types.KeyboardButton("–•–∏–º–∏—è(–û–ì–≠)")
        item6 = types.KeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è(–û–ì–≠)")
        item7 = types.KeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è(–û–ì–≠)")
        item8 = types.KeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–û–ì–≠)")
        item9 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è(–û–ì–≠)")
        item10 = types.KeyboardButton('/stats')
        item11 = types.KeyboardButton('/help')
        markup.add(item1, item2)
        markup.add(item3, item4)
        markup.add(item5, item6)
        markup.add(item7, item8)
        markup.add(item9)
        markup.add(item10, item11)
        await User.predmet.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=markup)


@dp.message_handler(lambda message: message.text.lower() == '/ege', state=User.examen)  # –∫–æ–º–∞–Ω–¥–∞ "/ege"
async def process_ege(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vibor_ex'] = 'ege'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        item2 = types.KeyboardButton("–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        item3 = types.KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫(–ï–ì–≠)")
        item4 = types.KeyboardButton("–§–∏–∑–∏–∫–∞(–ï–ì–≠)")
        item5 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–ï–ì–≠)")
        item6 = types.KeyboardButton("–•–∏–º–∏—è(–ï–ì–≠)")
        item7 = types.KeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è(–ï–ì–≠)")
        item8 = types.KeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è(–ï–ì–≠)")
        item9 = types.KeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–ï–ì–≠)")
        item10 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è(–ï–ì–≠)")
        item11 = types.KeyboardButton('/stats')
        item12 = types.KeyboardButton('/help')
        markup.add(item1, item2)
        markup.add(item3, item4)
        markup.add(item5, item6)
        markup.add(item7, item8)
        markup.add(item9, item10)
        markup.add(item11, item12)
        await User.predmet.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=markup)


@dp.message_handler(lambda message: message.text.lower() not in ['–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                                                                 '–±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–µ–≥—ç)',
                                                                 '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–æ–≥—ç)',
                                                                 '—Ñ–∏–∑–∏–∫–∞(–æ–≥—ç)', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–æ–≥—ç)',
                                                                 '—Ö–∏–º–∏—è(–æ–≥—ç)', '–±–∏–æ–ª–æ–≥–∏—è(–æ–≥—ç)',
                                                                 '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–æ–≥—ç)', '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–æ–≥—ç)',
                                                                 '–∏—Å—Ç–æ—Ä–∏—è(–æ–≥—ç)', '—Ñ–∏–∑–∏–∫–∞(–µ–≥—ç)',
                                                                 '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–µ–≥—ç)', "—Ö–∏–º–∏—è(–µ–≥—ç)",
                                                                 '–±–∏–æ–ª–æ–≥–∏—è(–µ–≥—ç)', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–µ–≥—ç)',
                                                                 '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–µ–≥—ç)', '–∏—Å—Ç–æ—Ä–∏—è(–µ–≥—ç)'],
                    state=User.predmet)  # —Ö–∞–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
async def failed_process_predmet(message: types.Message):
    return await message.reply("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç\n"
                               "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –µ–≥–æ –≤—ã–±–æ—Ä–∞")


@dp.message_handler(lambda message: message.text.lower(), state=User.predmet)
async def process_predmet(message: types.Message, state: FSMContext):
    conoge = sqlite3.connect('db/oge.db')
    conege = sqlite3.connect('db/ege.db')
    async with state.proxy() as data:
        data['predmet'] = message.text.lower()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        await User.answer.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await state.update_data(predmet=message.text)
        slovar = {'—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–µ–≥—ç)': 'rus_yaz', '–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'mat_prof', '–±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'mat_baz',
                  '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'matem', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫(–æ–≥—ç)': 'rus_yaz', '—Ñ–∏–∑–∏–∫–∞(–æ–≥—ç)': 'fizika',
                  '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–æ–≥—ç)': 'infor', '—Ö–∏–º–∏—è(–æ–≥—ç)': 'him', '–±–∏–æ–ª–æ–≥–∏—è(–æ–≥—ç)': 'biol', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–æ–≥—ç)': 'geog',
                  '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–æ–≥—ç)': 'obshes', '–∏—Å—Ç–æ—Ä–∏—è(–æ–≥—ç)': 'hist', '—Ñ–∏–∑–∏–∫–∞(–µ–≥—ç)': 'fizika', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–µ–≥—ç)': 'infor',
                  "—Ö–∏–º–∏—è(–µ–≥—ç)": 'him', '–±–∏–æ–ª–æ–≥–∏—è(–µ–≥—ç)': 'biol', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è(–µ–≥—ç)': 'geog', '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ(–µ–≥—ç)': 'obshes',
                  '–∏—Å—Ç–æ—Ä–∏—è(–µ–≥—ç)': 'hist'}
        if data['vibor_ex'] == 'ege':
            cur = conege.cursor()
            result = cur.execute(f"""SELECT task, answer FROM {slovar[data['predmet']].lower()}
                            WHERE id IN (SELECT id FROM rus_yaz ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()
        if data['vibor_ex'] == 'oge':
            cur = conoge.cursor()
            result = cur.execute(f"""SELECT task, answer FROM {slovar[data['predmet']].lower()}
                            WHERE id IN (SELECT id FROM rus_yaz ORDER BY RANDOM() LIMIT 1)""").fetchall()
            for elem in result:
                print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                      f'{elem[1]}')
                data['answer'] = elem[1]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                await bot.send_photo(message.from_user.id, photo=elem[0])
                await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            conege.close()


@dp.message_handler(state=User.answer)  # —Ö–∞–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–≤–µ—Ç
async def first_answer(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    if ''.join(answer.lower().split()) == data['answer']:  # —Å–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        db = sqlite3.connect('db/user_db.db')
        cdb = db.cursor()
        cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")  # –¥–æ–±–∞–≤–ª—è–µ–º +1 –∫
        cdb.execute(f"UPDATE users SET right_ans = right_ans + 1 WHERE user_id = {message.from_user.id}")  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        db.commit()  # —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        db.close()
        await bot.send_message(message.from_user.id, '–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üéâ')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
        item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
        item3 = types.KeyboardButton('/stats')
        item4 = types.KeyboardButton('/help')
        markup.add(item1, item2)
        markup.add(item3, item4)
        await User.end_ans.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç —ç—Ç–æ–≥–æ
        await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/start")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await state.reset_state(with_data=False)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞!', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/oge':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/oge")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await User.examen.set()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/ege':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/ege")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await User.examen.set()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
    else:
        await bot.send_message(message.from_user.id,
                               '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –û–¥–Ω–∞–∫–æ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '
                               '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã –µ—â–µ —Ä–∞–∑')
        await User.wast_ans.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@dp.message_handler(state=User.wast_ans)
async def second_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        answer = message.text
        db = sqlite3.connect('db/user_db.db')
        cdb = db.cursor()
        if ''.join(answer.lower().split()) == data['answer']:
            cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")
            cdb.execute(f"UPDATE users SET right_ans = right_ans + 1 WHERE user_id = {message.from_user.id}")
            db.commit()
            db.close()
            await bot.send_message(message.from_user.id, '–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üéâ')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
            item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
            item3 = types.KeyboardButton('/stats')
            item4 = types.KeyboardButton('/help')
            markup.add(item1, item2)
            markup.add(item3, item4)
            await User.end_ans.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç —ç—Ç–æ–≥–æ
            await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)
        elif ''.join(answer.lower().split()) == '/start':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/start")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await state.reset_state(with_data=False)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞!', reply_markup=markup)
        elif ''.join(answer.lower().split()) == '/oge':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/oge")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await User.examen.set()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
        elif ''.join(answer.lower().split()) == '/ege':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/ege")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await User.examen.set()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞
            await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
        else:
            cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")
            cdb.execute(f"UPDATE users SET wrong_ans = wrong_ans + 1 WHERE user_id = {message.from_user.id}")
            db.commit()  # –¥–æ–±–∞–≤–ª—è–µ–º +1 –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–¥–µ–ª–∞–Ω–Ω—ã–º –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
            db.close()
            await bot.send_message(message.from_user.id, md.text(
                md.text(md.bold('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')),
                md.text(md.code('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:'), md.bold(data['answer'])),
                sep='\n'), parse_mode=ParseMode.MARKDOWN)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
            item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
            item3 = types.KeyboardButton('/stats')
            item4 = types.KeyboardButton('/help')
            markup.add(item1, item2)
            markup.add(item3, item4)
            await User.end_ans.set()  # –≤–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç —ç—Ç–æ–≥–æ
            await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)


@dp.message_handler(state=User.end_ans)
async def process_end_ans(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        com = message.text
        if com.lower() == '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton(f"{data['predmet']}")  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            item1 = types.KeyboardButton('/stats')  # –ø—Ä–µ–¥–º–µ—Ç–∞
            item2 = types.KeyboardButton('/help')
            markup.add(item)
            markup.add(item1, item2)
            await User.predmet.set()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/start")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await state.reset_state(with_data=False)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await bot.send_message(message.from_user.id, '–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!üëã', reply_markup=markup)


if __name__ == '__main__':
    executor.start_polling(dp, loop=loop, skip_updates=True)
